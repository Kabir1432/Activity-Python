# Generated by Django 4.2.1 on 2023-07-12 06:59

import activityngo.custom_auth.managers
import activityngo.utils.utils
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicationUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('photo', models.ImageField(blank=True, height_field='height_photo', null=True, upload_to=activityngo.utils.utils.get_user_photo_random_filename, width_field='width_photo')),
                ('width_photo', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('height_photo', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, error_messages={'unique': 'A user with that uuid already exists.'}, help_text='Required. A 32 hexadecimal digits number as specified in RFC 4122', unique=True, verbose_name='uuid')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Lettres , digits and @/./+/-/ only .', max_length=150, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='email verified')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('fullname', models.CharField(blank=True, help_text='Full name as it was returned by social provider', max_length=300, verbose_name='full name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the user should be treated as active.Unselect this instead of deleting account.', verbose_name='active')),
                ('is_delete', models.BooleanField(default=False, help_text='Designates whether this user has been deleted.', verbose_name='delete')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Registered date')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('last_user_activity', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last activity')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Mobile Number')),
                ('is_phoneOtp_verified', models.BooleanField(default=False, verbose_name='Is Phone Otp Verified')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitude')),
                ('location', models.CharField(blank=True, max_length=264, null=True, verbose_name='Location')),
                ('nationality', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nationality')),
                ('height', models.CharField(blank=True, max_length=16, null=True, verbose_name='Height')),
                ('weight', models.CharField(blank=True, max_length=16, null=True, verbose_name='Weight')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('age', models.CharField(blank=True, max_length=8, null=True, verbose_name='Age')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('others', 'Others')], max_length=10, null=True)),
                ('device_type', models.CharField(blank=True, max_length=1, null=True, verbose_name='Device Type')),
                ('device_token', models.CharField(blank=True, max_length=256, null=True, verbose_name='Device Token')),
                ('os_version', models.CharField(blank=True, max_length=8, null=True, verbose_name='OS Version')),
                ('device_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Device Name')),
                ('model_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Model Name')),
                ('ip_address', models.CharField(blank=True, max_length=32, null=True, verbose_name='IP Address')),
                ('old_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Old Latitude')),
                ('old_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Old Longitude')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', activityngo.custom_auth.managers.ApplicationUserManager()),
            ],
        ),
    ]
