"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os.path

import environ
import firebase_admin
from corsheaders.defaults import default_headers
from firebase_admin import credentials

# assign env
env = environ.Env()
environ.Env.read_env()

root = environ.Path(__file__) - 3
apps_root = root.path("activityngo")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = root()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# API-KEY Config
# --------------------------------------------------------------------------
API_KEY_SECRET = bytes(env("API_KEY_SECRET"), "utf-8")

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    # 'drf_secure_token',
    "django_filters",
    # 'tinymce',
    "fcm_django",
    "django_crontab",
    "corsheaders",
    'drf_api_logger',
    # "django_celery_results",
]

LOCAL_APPS = [
    "activityngo.custom_auth",
    "activityngo.registrations",
    "activityngo.ngo",
    "activityngo.sub_admin",
    "activityngo.entities",
    "activityngo.university",
    "activityngo.college",
    "activityngo.project",
    "activityngo.question_types",
    "activityngo.student",
    "activityngo.notification",
    "activityngo.cart",
    "activityngo.discount",
    "activityngo.order",
    "activityngo.student_project",
    "activityngo.dashboardcount",
    "activityngo.cron_logger",
    "activityngo.cms",
    "activityngo.activity_report",
    "activityngo.fcm",
    "activityngo.task_evaluation",
    "activityngo.resubmit_task",
    "activityngo.website_content",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware',
    "activityngo.sub_admin.middleware.AccessLoggingMiddleware",
    "activityngo.custom_auth.middleware.UpdateUserActivityMiddleware",
    "activityngo.custom_auth.middleware.TimeRestrictionMiddleware",
    # "activityngo.cron_logger.middleware.ServerErrorMiddleware",
]

# DRF API Logger
# ---------------------------------
DRF_API_LOGGER_DATABASE = True
DRF_API_LOGGER_SIGNAL = True  # Default to False
DRF_LOGGER_QUEUE_MAX_SIZE = 10  # Default to 50 if not specified.
DRF_API_LOGGER_EXCLUDE_KEYS = ['password', 'token', 'access', 'refresh', 'cvc']

# -----------------------

ROOT_URLCONF = "config.urls"
WSGI_APPLICATION = "config.wsgi.application"

AUTH_USER_MODEL = "custom_auth.ApplicationUser"

AUTHENTICATION_BACKENDS = (
    "activityngo.custom_auth.auth_backends.model_backend.CustomModelBackend",
)

# Django Rest Framework configurations
# ------------------------------------

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "activityngo.custom_auth.auth_backends.authentication.MultiTokenAuthentication"
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_RENDERER_CLASSES": ["activityngo.utils.renderer.CustomRenderer"],
    "PAGE_SIZE": 10,
    "DEFAULT_PAGINATION_CLASS": "activityngo.utils.paginator.CustomPagination",
}

# Project name
# ------------
PROJECT_FULL_NAME = env("PROJECT_FULL_NAME", default="activityngo")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            root("activityngo", "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # 'activityngo.custom_auth.context_processors.dashboard'
            ],
        },
    },
]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = root("static")

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "django.contrib.staticfiles.finders.FileSystemFinder",
)

STATICFILES_DIRS = [
    root("activityngo", "assets"),
]

MEDIA_URL = "/media/"
MEDIA_ROOT = root("media")

USER_PHOTOS = "user_photos"
LLP_CERTIFICATE = "llp_Certificate"
GSTIN_DOCUMENT = "gstin_document"
UDHYAM_AADHAR_DOCUMENT = "udhyam_aadhar_document"
DPIIT_DOCUMENT = "dpiit_document"
PAN_CARD = "pan_card"
TAN_CARD = "tan_card"
LOGO = "logo"
TRUSTEE_1_AADHAR_CARD = "trustee_1_Aadhar_card"
TRUSTEE_2_AADHAR_CARD = "trustee_2_aadhar_card"
CANCELLED_CHEQUE = "cancelled_cheque"
SEAL_AND_SIGN_OF_DIRECTOR_1 = "seal_and_sign_of_director_1"
SEAL_AND_SIGN_OF_DIRECTOR_2 = "seal_and_sign_of_director_2"
ISSUE_OF_CERTIFICATE = "issue_of_certificate"
NGO_OFFICE_PHOTO = "issue_of_certificate"
SEAL_AND_SIGN_OF_TRUSTEE_3 = "issue_of_certificate"
FRANCHISE_CERTIFICATE = "issue_of_certificate"
TRUST_DEED = "trust_deed"
WALKTHROUGHT_MEDIA = "walkthrough_media"
COMPLAINT_MEDIA = "complaint_media"
UPLOAD_PHOTO_QUESTION = "upload_photo_question"
TEXT_TUTORIAL = "text_tutorial"
SCREENSHOT_TUTORIAL = "screenshot_tutorial"
ORDER_INVOICE = "order_invoice"
STUDENT_COMPLAINT = "student_complaint"
VIDEO_QUESTION_THUMBNAIL = "video_question_thumbnail"
USER_MANUAL_PROJECT_TASK_TUTORIAL = "user_manual_project_task_tutorial"
ACTIVITY_REPORT_FILE = "activity_report_file"
STUDENT_QR_CODE_VERIFICATION = "student_qr_code_verification"
STUDENT_ACTIVITY_CERTIFICATE = "student_activity_certificate"
STUDENT_ACTIVITY_CERTIFICATE_PAGE_1_TO_5 = "student_activity_certificate_page_1_to_5"
STUDENT_ACTIVITY_CHAPTERS = "student_activity_chapters"
STUDENT_ACTIVITY_PIE_CHART = "student_activity_pie_chart"
HOW_TO_COMPLETE_TASKS_USER_MANUAL = "how_to_complete_tasks_user_manual"
WEBSITE_COVER_PHOTO = "website_cover_photo"
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email template config
# --------------------------------------------------------------------------
TEMPLATED_EMAIL_TEMPLATE_DIR = "email/"
TEMPLATED_EMAIL_FILE_EXTENSION = "html"

# GDAL_LIBRARY_PATH = ''
# GEOS_LIBRARY_PATH = ''


# AWS
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME")
AWS_REGION_NAME = "ap-south-1"

# to allow to access api in angular
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = list(default_headers) + ["*"]
CSRF_TRUSTED_ORIGINS = [
    "https://api.activitypointsengg.com",
]

CRONJOBS = [
    ("15 18 * * *", "activityngo.discount.cron.discount_start_end_cron"),
    ("15 18 * * *", "activityngo.sub_admin.cron.remove_log_of_after_7_days"),
    ("15 18 * * *", "activityngo.cart.cron.empty_cart_model"),
    ("15 18 * * *", "activityngo.student.cron.inactive_student_after_1_year"),
    ("15 18 * * *", "activityngo.student.cron.inactive_5_year_old_student"),
    ("15 18 * * *", "activityngo.order.cron.set_order_expire"),
]
PRODUCTION = env.bool("PRODUCTION", default=False)
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'cron.log'),
#
#         },
#     },
#     'root': {
#         'handlers': ['file'],
#         'level': 'INFO',
#     },
# }

# reset password link expire time
PASSWORD_RESET_TIMEOUT = 1800

# FCM_DJANGO_SETTINGS = {
#     'FCM_SERVER_KEY': env('FCM_SERVER_KEY', default=None),
#     # true if you want to have only one active device per registered user at a time
#     'ONE_DEVICE_PER_USER': False,
#     #     device to which notification can not be sent, are deleted upon receiving error response from FCM
#     'DELETE_INACTIVE_DEVICES': False
# }
cred = credentials.Certificate(
    os.path.join(BASE_DIR, "config/settings/firebase-ngo.json")
)
firebase_admin.initialize_app(cred)

# Celery Configuration Options
# CELERY_TIMEZONE = "Asia/Kolkata"
# CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_TIME_LIMIT = 30 * 60
#
#
# CELERY_RESULT_BACKEND = 'django-db'
# CELERY_CACHE_BACKEND = 'django-cache'
#
# # celery setting.
# CELERY_CACHE_BACKEND = 'default'
#
# # django setting.
# # CACHES = {
# #     'default': {
# #         'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
# #         'LOCATION': 'my_cache_table',
# #     }
# # }
#
# # settings.py
#
# CELERY_BROKER_URL = 'redis://localhost:6379/0'


# -------------------------------------------------------------------------------------------------------
from kombu import Exchange, Queue

#
# # Celery configuration
# # --------------------------------------------------------------------------

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_RESULT_SERIALIZER = 'json'

CELERY_TASK_IGNORE_RESULT = True

CELERY_TASK_DEFAULT_QUEUE = 'activityngo-celery-queue'
CELERY_TASK_DEFAULT_EXCHANGE = 'activityngo-exchange'
CELERY_TASK_DEFAULT_ROUTING_KEY = CELERY_TASK_DEFAULT_QUEUE
# CELERY_NOTIFICATION_QUEUE = 'activityngo-celery-notifications-queue'

CELERY_TASK_QUEUES = (
    Queue(CELERY_TASK_DEFAULT_QUEUE, Exchange(CELERY_TASK_DEFAULT_EXCHANGE), routing_key=CELERY_TASK_DEFAULT_QUEUE),
    # Queue(CELERY_NOTIFICATION_QUEUE, Exchange(CELERY_TASK_DEFAULT_EXCHANGE), routing_key=CELERY_NOTIFICATION_QUEUE),
)
CELERY_TASK_ROUTES = {}

# TASK_ROUTES_SETTINGS = {
#     CELERY_NOTIFICATION_QUEUE: ['taskapp.notification_tasks.send_push_notification'],
# }
# for queue_key, tasks_names in list(TASK_ROUTES_SETTINGS.items()):
#     for task_name in tasks_names:
#         CELERY_TASK_ROUTES[task_name] = {
#             'queue': queue_key,
#             'routing_key': queue_key,
#         }

# CELERY_TASK_BROKER_URL = env('CELERY_BROKER_URL')
CELERY_TASK_BROKER_URL = "amqp://admin:123@localhost:5672/"
# CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND_URL')
CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'

CELERY_BROKER_URL = 'redis://localhost:6379/1'

if 'redis' in CELERY_TASK_BROKER_URL:
    CELERY_BROKER_TRANSPORT_OPTIONS = {
        'visibility_timeout': 60 * 60 * 24 * 9,
    }

# set indian time zone
TIME_ZONE = 'Asia/Kolkata'

# for admin panel, max number record deleted at time
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000000
